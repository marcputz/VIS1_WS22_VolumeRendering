precision highp float;
precision mediump sampler3D;

uniform sampler3D data;
uniform sampler2D backSideTexture;
uniform sampler2D frontSideTexture;
uniform int canvasWidth;
uniform int canvasHeight;
uniform float volumeScale;

uniform int raycasting_method;
uniform float iso_value;
uniform float iso_alpha;
uniform vec3 iso_color;
uniform float iso_value_two;
uniform float iso_alpha_two;
uniform vec3 iso_color_two;
uniform int enable_second_iso_plain;
uniform int enable_first_hit_shading;
uniform vec3 camera_pos;

const int MAX_STEPS = 1024;
const float STEP_SIZE = 0.5;
const int REFINE_STEPS = 4;

vec3 getBackSideCoords(vec2 fragCoords);
vec3 getFrontSideCoords(vec2 fragCoords);
vec3 getRay(vec2 fragCoords);

void raycast_mip(vec3 startPos, vec3 rayDirection, int nSteps);
void raycast_first_hit(vec3 startPos, vec3 rayDirection, int nSteps);

float getDensity(vec3 dataPosition);
vec4 valueToColor(float val);

void main(){

    // get the fragments position
    vec2 fragPos = vec2(gl_FragCoord.x / float(canvasWidth), gl_FragCoord.y / float(canvasHeight));

    // get ray direction and length
    vec3 ray = getRay(fragPos);
    vec3 rayDirection = normalize(ray);
    float rayLength = length(ray);

    // get starting and ending positions of the ray on the bounding box
    vec3 startPos = getFrontSideCoords(fragPos);
    vec3 endPos = getBackSideCoords(fragPos);

    // calculate the number of steps by dividing the length of the ray throught the relative step size
    // IMPORTANT: Step size is given in the volume's coordinates, so it has to be scaled down accordingly first
    int nSteps = int(floor(rayLength / (STEP_SIZE / volumeScale)));
    if (nSteps < 1) {
        discard;
    }

    // sample the data values by the chosen raycasting method
    float density = 0.0;
    if (raycasting_method == 0) {       // MIP = 0
        raycast_mip(startPos, rayDirection, nSteps);
    } else {                            // First Hit = 1
        raycast_first_hit(startPos, rayDirection, nSteps);
    }
}

float getDensity(vec3 dataPosition) {
    return texture(data, dataPosition).r;
}

vec4 valueToColor(float val) {
    return vec4(vec3(1.0, 1.0, 1.0) * val, 1.0);
}

vec3 getBackSideCoords(vec2 fragCoords) {
    return texture2D(backSideTexture, fragCoords).xyz;
}

vec3 getFrontSideCoords(vec2 fragCoords) {
    return texture2D(frontSideTexture, fragCoords).xyz;
}

vec3 getRay(vec2 fragCoords) {
    vec3 frontSideCoords = getFrontSideCoords(fragCoords);
    vec3 backSideCoords = getBackSideCoords(fragCoords);

    return (backSideCoords - frontSideCoords);
}

void raycast_mip(vec3 startPos, vec3 rayDirection, int nSteps) {

    float maxVal = -1e6;
    vec3 currPos = startPos;
    vec3 maxValPos;
    vec3 step = (rayDirection * (STEP_SIZE / volumeScale));

    for (int i = 0; i < MAX_STEPS; i++) {
        if (i >= nSteps) {
            break;
        }
        float val = getDensity(currPos);
        if (val > maxVal) {
            maxVal = val;
            maxValPos = currPos;
        }
        currPos += step;
    }

    gl_FragColor = valueToColor(maxVal);
    return;
}

void raycast_first_hit(vec3 startPos, vec3 rayDirection, int nSteps) {

    vec3 ambientColor = vec3(0.3, 0.3, 0.3);
    vec3 lightColor = vec3(1.0, 1.0, 1.0);
    //vec3 lightColor = vec3(0.7, 0.7, 0.7);
    vec3 lightPos = vec3(-1.0, -1.0, -0.5);
    vec3 lightDirection = normalize(vec3(0.2, 0.2, 0.1));
    vec3 viewPos = normalize(camera_pos);

    vec3 step = (rayDirection * (STEP_SIZE / volumeScale));
    vec3 prevPos = startPos;
    vec3 currPos = startPos + step;

    float prevDensity = 0.0;
    float currDensity = getDensity(startPos);

    // Check if the ISO Value is in the supported range (0-1)
    if (iso_value < 0.0 || iso_value > 1.0) {
        discard;
    }

    for (int i = 1; i < MAX_STEPS; i++) {
        if (i >= nSteps) {
            break;
        }

        // set previous value as 'prevDensity' and save current one in 'currDensity';
        prevDensity = getDensity(prevPos);
        currDensity = getDensity(currPos);

        if (currDensity >= float(iso_value)) {

            // Calculate the new position by interpolating the previous and current positions with the iso value
            float ratio = (float(iso_value) - prevDensity) / (currDensity - float(iso_value));
            vec3 interpolPos = prevPos + (step * ratio);

            if (enable_first_hit_shading == 0) {

                gl_FragColor = vec4(iso_color, iso_alpha);
                return;

            } else {

                // Calculate the gradient
                float epsilon = 0.01;
                vec3 firstPointX = vec3(interpolPos.x - epsilon, interpolPos.y, interpolPos.z);
                vec3 secondPointX = vec3(interpolPos.x + epsilon, interpolPos.y, interpolPos.z);
                float gradX = getDensity(firstPointX) - getDensity(secondPointX);
                vec3 firstPointY = vec3(interpolPos.x, interpolPos.y - epsilon, interpolPos.z);
                vec3 secondPointY = vec3(interpolPos.x, interpolPos.y + epsilon, interpolPos.z);
                float gradY = getDensity(firstPointX) - getDensity(secondPointY);
                vec3 firstPointZ = vec3(interpolPos.x, interpolPos.y, interpolPos.z - epsilon);
                vec3 secondPointZ = vec3(interpolPos.x, interpolPos.y, interpolPos.z + epsilon);
                float gradZ = getDensity(firstPointZ) - getDensity(secondPointZ);
                vec3 gradient = 0.5 * vec3(gradX, gradY, gradZ);

                // normalize the gradient to get the normal vector
                vec3 normal = normalize(gradient);

                vec3 lightDir = normalize(lightPos - interpolPos);
                float diff = max(dot(normal, lightDir), 0.0);
                vec3 diffuse = diff * lightColor;
                vec3 viewDir = normalize(viewPos - interpolPos);
                vec3 reflectDir = reflect(-lightDir, normal);
                float spec = pow(max(dot(viewDir, reflectDir), 0.0), 64.0);
                vec3 specular = 1.0 * spec * lightColor;

                // use flat shading to calculate pixel color
                // Equation Source: http://www.cs.toronto.edu/~kyros/courses/418/Notes/Shading.pdf
                //vec3 myColor = ambientColor + (lightColor * dot(normal,-lightDirection));

                vec3 myColor = (ambientColor + diffuse + specular) * iso_color;

                gl_FragColor = vec4(myColor, iso_alpha);
                return;
            }
        }

        prevPos = currPos;
        currPos = currPos + step;
    }

    // display blank fragment if no iso match found
    gl_FragColor = vec4(0.0);
    return;
}