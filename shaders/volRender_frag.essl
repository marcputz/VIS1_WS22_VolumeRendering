precision highp float;
precision mediump sampler3D;

uniform sampler3D data;
uniform sampler2D backSideTexture;
uniform sampler2D frontSideTexture;
uniform int canvasWidth;
uniform int canvasHeight;
uniform float volumeScale;
uniform int doRefinement;

uniform int raycasting_method;
uniform float iso_value;

const int MAX_STEPS = 1024;
const float STEP_SIZE = 0.5;
const int REFINE_STEPS = 4;

vec3 getBackSideCoords(vec2 fragCoords);
vec3 getFrontSideCoords(vec2 fragCoords);
vec3 getRay(vec2 fragCoords);

void raycast_mip(vec3 startPos, vec3 rayDirection, int nSteps);
void raycast_first_hit(vec3 startPos, vec3 rayDirection, int nSteps);

float getDensity(vec3 dataPosition);
vec4 valueToColor(float val);

void main(){

    // get the fragments position
    vec2 fragPos = vec2(gl_FragCoord.x / float(canvasWidth), gl_FragCoord.y / float(canvasHeight));

    // get ray direction and length
    vec3 ray = getRay(fragPos);
    vec3 rayDirection = normalize(ray);
    float rayLength = length(ray);

    // get starting and ending positions of the ray on the bounding box
    vec3 startPos = getFrontSideCoords(fragPos);
    vec3 endPos = getBackSideCoords(fragPos);

    // calculate the number of steps by dividing the length of the ray throught the relative step size
    // IMPORTANT: Step size is given in the volume's coordinates, so it has to be scaled down accordingly first
    int nSteps = int(floor(rayLength / (STEP_SIZE / volumeScale)));
    if (nSteps < 1) {
        discard;
    }

    // sample the data values by the chosen raycasting method
    float density = 0.0;
    if (raycasting_method == 0) {       // MIP = 0
        raycast_mip(startPos, rayDirection, nSteps);
    } else {                            // First Hit = 1
        raycast_first_hit(startPos, rayDirection, nSteps);
    }
}

float getDensity(vec3 dataPosition) {
    return texture(data, dataPosition).r;
}

vec4 valueToColor(float val) {
    return vec4(vec3(1.0, 1.0, 1.0) * val, 1.0);
}

vec3 getBackSideCoords(vec2 fragCoords) {
    return texture2D(backSideTexture, fragCoords).xyz;
}

vec3 getFrontSideCoords(vec2 fragCoords) {
    return texture2D(frontSideTexture, fragCoords).xyz;
}

vec3 getRay(vec2 fragCoords) {
    vec3 frontSideCoords = getFrontSideCoords(fragCoords);
    vec3 backSideCoords = getBackSideCoords(fragCoords);

    return (backSideCoords - frontSideCoords);
}

void raycast_mip(vec3 startPos, vec3 rayDirection, int nSteps) {

    float maxVal = -1e6;
    vec3 currPos = startPos;
    vec3 maxValPos;
    vec3 step = (rayDirection * (STEP_SIZE / volumeScale));

    for (int i = 0; i < MAX_STEPS; i++) {
        if (i >= nSteps) {
            break;
        }
        float val = getDensity(currPos);
        if (val > maxVal) {
            maxVal = val;
            maxValPos = currPos;
        }
        currPos += step;
    }

    if (doRefinement == 1) {
        vec3 refStep = step / float(REFINE_STEPS);
        vec3 refPos = maxValPos - refStep * (float(REFINE_STEPS) / 2.0);

        for (int i = 0; i < REFINE_STEPS; i++) {
            maxVal = max(maxVal, getDensity(refPos));
            refPos += refStep;
        }
    }

    gl_FragColor = valueToColor(maxVal);
    return;
}

void raycast_first_hit(vec3 startPos, vec3 rayDirection, int nSteps) {

    vec3 step = (rayDirection * (STEP_SIZE / volumeScale));
    vec3 prevPos = startPos;
    vec3 currPos = startPos + step;

    float prevDensity = 0.0;
    float currDensity = getDensity(startPos);

    // Check if the ISO Value is in the supported range (0-1)
    if (iso_value < 0.0 || iso_value > 1.0) {
        discard;
    }

    for (int i = 1; i < MAX_STEPS; i++) {
        if (i >= nSteps) {
            break;
        }

        // set previous value as 'prevDensity' and save current one in 'currDensity';
        prevDensity = getDensity(prevPos);
        currDensity = getDensity(currPos);

        if (currDensity >= iso_value) {

            float ratio = (iso_value - prevDensity) / (currDensity - iso_value);
            vec3 interpolatedPos = prevPos + (step * ratio);

            gl_FragColor = vec4(interpolatedPos, 1.0);
            return;
        }

        prevPos = currPos;
        currPos = currPos + step;
    }

    // display blank fragment if no iso match found
    gl_FragColor = vec4(0.0);
    return;
}